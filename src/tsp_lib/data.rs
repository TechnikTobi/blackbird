use crate::tsp_lib::node::*;
use crate::tsp_lib::distance::*;

/// This struct stores the general information of a TSPLIB problem instance
/// This is only the data as provided by the input file and does not feature
/// attributes that are generated by the algorithm itself
pub struct
TSPData
{
	pub n: usize,
	pub nodes: Vec<TSPNode>,
	pub distance: EDistance,
}

impl
TSPData
{
	/// Creates a new empty TSP instance that needs to be filled with nodes
	/// via the add_node function.
	pub fn
	empty
	(
		capacity: usize,
	)
	-> TSPData
	{
		TSPData 
		{ 
			n: 0, 
			nodes: Vec::with_capacity(capacity), 
			distance: EDistance::EUCLIDEAN_2D 
		}
	}

	/// Adds a new node to the TSP instance
	pub fn
	add_node
	(
		&mut self,
		new_node: &TSPNode
	)
	{
		self.n += 1;
		self.nodes.push(new_node.to_owned());
		self.nodes.sort_by(|a, b| a.id.partial_cmp(&b.id).unwrap());
	}

	/// Get a (read-only) reference to a TSP Node via its ID
	/// The nodes must not change while solving the TSP, which is why only a 
	/// read-only version of this function exists
	pub fn
	get_node
	(
		&self,
		node_id: TSPNodeID
	)
	-> &TSPNode
	{
		&self.nodes[node_id]
	}

	/// Setter Method for the distance metric for this TSP instance
	pub fn
	set_distance_metric
	(
		&mut self,
		distance: EDistance
	)
	{
		self.distance = distance;
	}

	/// Gets the distance between two nodes of the TSP instance via their IDs
	/// Note that this delibaretly gives a warning to emphasize that this 
	/// requires attention in case additional distance measures are introduced
	/// in the future
	pub fn
	get_distance_between_via_id
	(
		&self,
		node_1_id: TSPNodeID,
		node_2_id: TSPNodeID
	)
	-> TSPWeight
	{
		// Speed up the special case of getting the distance of a node to itself
		if node_1_id == node_2_id
		{
			match self.distance
			{
				EDistance::EUCLIDEAN_2D => { return 0.0; },
				_ => todo!(),
			}
		}

		// Get the two nodes we want to know the distance between of
		let node_1 = self.get_node(node_1_id);
		let node_2 = self.get_node(node_2_id);

		return self.get_distance_between(node_1, node_2)
	}

	/// Gets the distance between two nodes of the TSP instance
	/// Note that this delibaretly gives a warning to emphasize that this 
	/// requires attention in case additional distance measures are introduced
	/// in the future
	pub fn
	get_distance_between
	(
		&self,
		node_1: &TSPNode,
		node_2: &TSPNode
	)
	-> TSPWeight
	{
		// Depending on the metric to be used, calculate the distance
		return match self.distance
		{
			EDistance::EUCLIDEAN_2D => {
				(
					(node_1.x - node_2.x).powi(2) + (node_1.y - node_2.y).powi(2)
				).sqrt()
			},
			_ => {
				panic!("TSPData get_distance_between: Distance not implemented!")
			},
		}
	}

	/// Count how many nodes the TSP instance contains 
	/// Used exclusively by the reader while reading in a problem instance file
	pub fn
	node_count
	(
		&self
	) 
	-> usize
	{
		return self.nodes.len();
	}

	#[allow(dead_code)]
	pub fn
	print
	(
		&self
	)
	{
		println!("TSP DATA:");
		println!("Distance: {:?}", self.distance);
		println!("Nodes:");
		self.nodes.iter().for_each(|node| node.print());
	}
}